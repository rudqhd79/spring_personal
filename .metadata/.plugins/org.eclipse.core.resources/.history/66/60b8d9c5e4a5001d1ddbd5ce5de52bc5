package com.busreservation.service;

import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.busreservation.entity.Customer;
import com.busreservation.repository.CustomerRepository;

import lombok.RequiredArgsConstructor;

@Service //service 클래스의 역할
@Transactional //서비스 클래서에서 로직을 처리하다가 에러가 발생하면 로직을 수행하기 이전 상태로 되돌려 준다. 
@RequiredArgsConstructor
public class CustomerService implements UserDetailsService {	//UserDetailsService: 로그인시 request에서 넘어온 사용자 정보를 받음
	
	private final CustomerRepository customerRepository;	//의존성주입
	
	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {

		Customer customer = customerRepository.findByEmail(email);
		
		if(customer == null) {
			throw new UsernameNotFoundException(email);
		}
		
		//userDetails의 객체를 반환
		return User.builder()
				.username(customer.getCustomer_email())
				.password(customer.getCustomer_password())
				.roles(customer.getRole().toString())
				.build();
	}
	
	public Customer saveMember(Customer member) {
		validateDuplicateMember(member);
		return customerRepository.save(member); //member 테이블에 insert
	}

	private void validateDuplicateMember(Customer member) {
		Customer findMember = customerRepository.findByEmail(member.getCustomer_email());
		if (findMember != null) {
			throw new IllegalStateException("이미 가입된 회원입니다.");
		}
	}
}
